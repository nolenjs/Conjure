import os
from os import system
from veronica import *
from pythonCodesQ import *
from elliot import *

IP =    "10.65.181.206"
PORT =  22
USER =  "futureleaders"
PASS =  "Conjure2023!"

rFile = "text.txt"
rpath = rf"C:\Users\futureleaders\elliot\{rFile}"
lFile = "script.py"

vmName = []
vmDetails = {}

def storeVMs():
    vmName, vmDetails = readCreds("resources/creds.yaml")

def chooseOpts():
    userChoice=1
    previousError = ""
    system('clear')
    while (True):
        # The art was generated by https://patorjk.com/software/taag
        title = '''

 ██████  ██████  ███    ██      ██ ██    ██ ██████  ███████ 
██      ██    ██ ████   ██      ██ ██    ██ ██   ██ ██      
██      ██    ██ ██ ██  ██      ██ ██    ██ ██████  █████   
██      ██    ██ ██  ██ ██ ██   ██ ██    ██ ██   ██ ██      
 ██████  ██████  ██   ████  █████   ██████  ██   ██ ███████ 
                                                            
                                                        
'''
        print(title)
        print("Alpha\n\n")

        print("Welcome to the conjure interface, what would you like to do?")
        print("============================================================")
        print(" 1)\tRun the Python one-liner demonstration")

        print("\n-2)\tQuit\n")
        if previousError != "":
            borders = "=" * len(previousError)
            print(borders)
            print(previousError)
            print(borders)
            previousError = ""
        initialInput = str(input("\nChoice:\t"))
        temp = False
        try:
            userChoice = int(initialInput)
        except:
            previousError = "The input must be an integer"
            system('clear')
            continue

        if userChoice not in [1,2,-2]:
            previousError = "The input must be one of the shown options"
            system('clear')
            continue

        system('clear') 
        break           

    return userChoice

def askValidInt(prompt, min, max):
    userInput = ""
    previousError = ""
    while True:
        userInput = input(prompt)
        try:
            userChoice = int(userInput)
        except:
            previousError = "The input must be an integer"
            continue
        
        if userChoice < min or userChoice > max:
            previousError = f"The input must be betwwen {min} and {max}"
            continue

        break
    return userChoice


def main():
    # === Load VM details into a list and dictionary to call later ===
    storeVMs()
    decision = -1
    while decision != -2:
        decision = chooseOpts()
        match decision:
            case 1:
                title = '''

 ██████  ██████  ███    ██      ██ ██    ██ ██████  ███████ 
██      ██    ██ ████   ██      ██ ██    ██ ██   ██ ██      
██      ██    ██ ██ ██  ██      ██ ██    ██ ██████  █████   
██      ██    ██ ██  ██ ██ ██   ██ ██    ██ ██   ██ ██      
 ██████  ██████  ██   ████  █████   ██████  ██   ██ ███████ 
                                                            
                                                        
'''
                print(title)
                print("Alpha\n\n")

                print("Running Python one-liner demonstration")
                print("======================================\n")

                howManyRequests = askValidInt("How many requests should we make?\t", 1, 100)
                howLongWait = askValidInt("On average, how many seconds between requests?\t", 1, 60)
                lowerBoundWait = howLongWait * 0.5
                upperBoundWait = howLongWait * 1.5

                for i in range(0,howManyRequests):
                    time.sleep(howLongWait)
                    files=["resources/toSend.py"]
                    runPyOneLiner(IP, PORT, USER, PASS, files, i)
                return
            case _:
                print(f"Received an unexepected input [{decision}]")
                return

if __name__ == '__main__':
    main()